In project three, we are using a structural design pattern, and we will use a wrapper to apply that structural design to our project. We can use the wrapper to provide a simplified interface to an object. In our project, we want to use the wrapper to convert a playlist of a mixed genre of songs that the user provides us, and then give them a more simplified version of a playlist that only contains a bunch of different songs of the same genre. Throughout this process, the wrapper will be communicating with the back end of the program. The communication with the back end involves sending what the user wants to do, the back end receiving and processing that request, and then sending it back to the front end.
In project three, we will also involve some behavioral design patterns such as chain of responsibility. Chain of Responsibility uses a way of passing a request through a chain of objects. In our case for this project, we will be passing the request of the user from the front end into the back end of the program. That request will be used to determine what the back end of the program will need to do in order to complete the request and is then sent back to the user. 
Using the design patterns of the wrapper and the Chain of Responsibility our program should be able to communicate well between the front end and the back end. With the wrapper receiving the information from the user and sending it to the back end so the back end can process it, it can then take that information and give back to the user, the way the user requested it.
